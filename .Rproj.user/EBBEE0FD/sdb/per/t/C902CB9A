{
    "contents" : "#'Calculate Standardized Difference between two groups.(category)\n#'\n#'@param vec_tr treatment group category vector\n#'@param vec_con control group category vector\n#'@return standardized differnce\n#'@export\n\n\nfun_sef_cat <- function (vec_tr, vec_con) {\n  mat_tr <- dummies::dummy(vec_tr)[,-ncol(dummies::dummy(vec_tr))]\n  mat_con <- dummies::dummy(vec_con)[,-ncol(dummies::dummy(vec_con))]\n  p_tr <- colMeans(mat_tr)\n  p_con <- colMeans(mat_con)\n  S <- (cov(mat_tr) + cov(mat_con))/2\n  es <- sqrt(t(matrix(p_tr-p_con)) %*% MASS::ginv(S) %*% matrix(p_tr-p_con))\n  return(es[,1])\n}\n\n#'Calculate Standardized Difference between two groups.(numeric)\n#'\n#'@param vec_tr treatment group numeric vector\n#'@param vec_con control group numeric vector\n#'@return standardized differnce\n#'@export\n\n\nfun_sef_num <- function (vec_tr, vec_con) {\n  e_tr <- mean(vec_tr)\n  e_con <- mean(vec_con)\n  S <- (var(vec_tr) + var(vec_con))/2\n  es <- sqrt((e_tr - e_con)^2/S)\n  return(es)\n}\n\n#'Calculate Standardized Difference between two groups.(category)\n#'\n#'@param input_data input dataframe with 2 columns(treatmend and responce)\n#'@param treat_vec_name treatment columns name\n#'@return standardized differnce\n#'@export\n\nfun_sef <- function (input_data,treat_vec_name) {\n  if(ncol(input_data) != 2){\n    print(\"ERROR::Invarid column name!\")\n  }else{\n    treat_vec <- input_data[,treat_vec_name]\n    if(length(unique(treat_vec)) < 2){\n      print(\"ERROR::Invarid treatment category!\")\n    }else{\n      vec <- input_data[,!(colnames(input_data) %in% treat_vec_name)]\n      if(is.numeric(vec)){\n        vec_tr <- vec[treat_vec == unique(treat_vec)[1]]\n        vec_con <- vec[treat_vec == unique(treat_vec)[2]]\n        es <- fun_sef_num(vec_tr, vec_con)\n      }else{\n        if(length(unique(vec)) > 2){\n          vec_tr <- vec[treat_vec == unique(treat_vec)[1]]\n          vec_con <- vec[treat_vec == unique(treat_vec)[2]]\n          es <- fun_sef_cat(vec_tr, vec_con)  \n        }else{\n          vec <- dummies::dummy(vec)[,1]\n          vec_tr <- vec[treat_vec == unique(treat_vec)[1]]\n          vec_con <- vec[treat_vec == unique(treat_vec)[2]]\n          es <- fun_sef_num(vec_tr, vec_con)\n        }\n      }\n      return(es)\n    }\n  }\n}\n\n#'Calculate Standardized Difference between two groups.(category)\n#'\n#'@param input_data input dataframe with treatmend and responces\n#'@param treat_vec_name treatment columns name\n#'@return standardized differnce vector\n#'@export\n\n\nfun_sef_df <- function (input_data, treat_vec_name) {\n  input_data_res <- input_data[,!(colnames(input_data) %in% treat_vec_name)]\n  if(!is.data.frame(input_data_res)){\n    es <- fun_sef(input_data,treat_vec_name)\n    names(es) <-  colnames(input_data)[!(colnames(input_data) %in% treat_vec_name)]\n    return_vec <- es\n  }else{\n    val_names_vec <- colnames(input_data_res)\n    return_vec <- vector(length = length(val_names_vec))\n    for(i in 1:length(val_names_vec)){\n      val_neme <- val_names_vec[i]\n      input_data_tar <- input_data[,c(treat_vec_name,val_neme)]\n      es <- fun_sef(input_data_tar,treat_vec_name)\n      return_vec[i] <- es\n    }\n    names(return_vec) <- val_names_vec\n  }\n  return(return_vec)\n}\n\n#fun_sef_df(input_data,treat_vec_name)\n",
    "created" : 1411718581818.000,
    "dirty" : false,
    "encoding" : "SHIFT-JIS",
    "folds" : "",
    "hash" : "2005632693",
    "id" : "C902CB9A",
    "lastKnownWriteTime" : 1411991099,
    "path" : "E:/Users/HEER_matsui/Documents/GitHub/Hiro_macchan_OPEN/stddif/Stddif/R/rStddif.R",
    "project_path" : "R/rStddif.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}